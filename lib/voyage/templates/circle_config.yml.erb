# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
       - image: circleci/ruby:2.4.2-node-browsers
         environment:
           PGHOST: 127.0.0.1
           PGUSER: <%= app_name %>_test
           RAILS_ENV: test
           CODECLIMATE_REPO_TOKEN: 10aba27f75cd0a3c672904dec06a89cbdb8b99d4bb51d4ae5497f2e41ebf25b8
           CC_TEST_REPORTER_ID: 10aba27f75cd0a3c672904dec06a89cbdb8b99d4bb51d4ae5497f2e41ebf25b8
           COVERAGE: true
       - image: circleci/postgres:9.5-alpine
         environment:
           POSTGRES_USER: <%= app_name %>_test
           POSTGRES_DB: <%= app_name %>_test
           POSTGRES_PASSWORD: ""

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/

    working_directory: ~/repo

    steps:
      - checkout
      - run: cp .env.example .env
      - run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      - run: chmod +x ./cc-test-reporter
      - run: ./cc-test-reporter before-build
      # Download and cache dependencies
      - restore_cache:
          keys:
            - gem-cache-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-{{ .Branch }}
            - gem-cache
      - run: bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          key: gem-cache-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - save_cache:
          key: gem-cache-{{ .Branch }}
          paths:
            - vendor/bundle
      - save_cache:
          key: gem-cache
          paths:
            - vendor/bundle

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # Run tests
      - run:
          name: run specs
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            COVERAGE=true bundle exec rspec --format progress --format RspecJunitFormatter -o /tmp/test-results/rspec.xml
      - run:
          name: run cukes
          command: |
            COVERAGE=true bundle exec cucumber --format junit --out /tmp/test-results/junit.xml
      - run: ./cc-test-reporter after-build --exit-code $?
